
项目统一域名:
    js.com

1. 下载项目：
    composer create-project laravel/laravel laravel54 "5.4.*"

2. 本地启动项目：
    php artisan serve
    或者  php artisan serve --port=8888

3. 保证项目的storage具有读写权限
4. 创建数据库迁移文件表:
    php artisan migrate:install

5. 现在安装完成后进行nginx配置:
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

6. 注意路由的先后顺序，有时候如果不规定路由参数的类型，会导致错误的路由拦截：
    Route::get('/posts/create', '\App\Http\Controllers\PostController@create');
    Route::get('/posts/{post}', '\App\Http\Controllers\PostController@show');
    先后顺序的不一样，会出现不同的页面跳转，一定要规定参数的类型

7. 引用wangeditor.js编辑器时，css、fonts、js这三个目录都要存在，并且要在同一级。
8. php artisan tinker
   用来直接测试使用模型，避免总是去创建路由规则

9. 使用php artisan tinker 进行数据填充
    factory(App\Post::class,20)->create();

10. php artisan storage:link  (记得使用此命令生成软连接进行图片资源访问，需要在每台机器上都执行)
    storage/app/public 目录用于存储用户生成的文件，比如可以被公开访问的用户头像，要达到被访问的目的，
    你还需要在public目录下生成一个软连接 storage 指向这个目录。
    你可以通过 php artisan storage:link 命令生成这个软链接。

11. 文件上传时需要开始php的  php_fileinfo扩展
12. 文件上传需要配置\config\filesystems.php 文件的配置项：
    'default' => 'public',

13. 关于容器，IOC控制反转，DI依赖注入的理解：
    13.1 容器：用来装东西的，容器中包含了许多实例对象和服务，当有程序需要时就直接从容器中获取即可，不需要程序
    自己使用“new”来自己实现。
    13.2 IOC控制反转: 将程序可能需要的实例或服务提前申请准备好，程序使用时直接获取，不用自己“new”，
        就好比：
            用户(“程序”)在饭店吃饭目的是为了填饱肚子(“实现程序”)，用户需要吃米饭，肉，鱼(“实例对象或相关服务”)，如果使用普通方式的话，
        用户需要自己先挑选(“new 实例化对象”)米饭，肉，鱼然后自己进行操作处理，最后做出了米饭，肉，鱼然后吃饱了肚子(“实现程序”)。
            但如果使用容器和控制反转时，饭店(“容器”)已经提前准备好了米饭，肉，鱼(“实例对象或相关服务”)，当客户需要吃米饭，肉，鱼时，
        直接对服务员说(“依赖注入”)自己需要米饭，肉，鱼即可马上得到，然后吃饱肚子(“实现程序”)，而且最重要的一点，用户不用担心米饭，肉，鱼不新鲜，
        当米饭，肉，鱼不新鲜时，饭店(“容器”)会自动更换(“升级或切换其他实例对象或服务”)最新鲜的米饭，肉，鱼而用户不需要关心这些问题，只要点菜吃饱(“实现程序”)就行了。
    13.3 DI依赖注入：需要相关服务或实例对象时，在参数中或构造函数中声明即可使用，无需"new"关键字创建

14. 门脸(Facades)模式：静态调用===>即调用服务的静态方法
    例： Cache::get('key');
15. 快速查找门脸类和注入类有哪些函数：
    1. php artisan tinker 下执行 app('log');
    2. https://laravel.com/api/5.4/index.html

16. 在实现前台注册登录以及用户认证的相关操作时不建议使用laravel自带的auth组件，因为该组件对实际需求不匹配，
    修改起来成本过大，不如自主开发，后台用户登录可根据需求进行使用。

17. 用户授权Policy
    1. 定义策略类
        php artisan make:policy PostPolicy

        //定义更新策略
        public function update(User $user, Post $post) {
                return $user->id == $post->user_id;
        }
    2. 注册策略类和模型关联
        D:\phpStudy\WWW\laravel54\app\Providers\AuthServiceProvider.php
        //注册策略
        protected $policies = [
                //'App\Model' => 'App\Policies\ModelPolicy',
                'App\Post' => 'App\Policies\PostPolicy',
            ];

        D:\phpStudy\WWW\laravel54\app\Post.php
        //关联模型
        public function user() {
                return $this->belongsTo(\App\User::class,'user_id','id');
        }
    3. 策略判断
        D:\phpStudy\WWW\laravel54\app\Http\Controllers\PostController.php
        $this->authorize('update',$post);

        //模板判断
        @if (Auth::user()->can('update', $post))

18. 关联模型预加载
    前提：已经创建模型之间的关联方法
    三种方式:
    1. $books=App\Book::with('author')->get();
    2. $books->load('author');
    3. 直接调用模型关联方法  $books->authors;

19. elasticsearch集成安装环境
    https://github.com/medcl/elasticsearch-rtf
    1.运行环境
        a.JDK8+
        b.系统可用内存>2G
    2.下载
        git clone git://github.com/medcl/elasticsearch-rtf.git -b master --depth 1
        百度网盘：https://pan.baidu.com/s/1pJNkrUV
    3.运行
        Mac/Linux:
            cd elasticsearch/bin
            ./elasticsearch
            sudo -u ops ES_JAVA_OPTS="-Xms2024m -Xmx2024m"  ./bin/elasticsearch  -d
        Windows:
            cd elasticsearch/bin
            elasticsearch.bat
    安装完成后查看：http://127.0.0.1:9200/

    4. 增加scout驱动
        4.1 composer require laravel/scout
        4.2 在config/app.php 配置文件的 providers 数组中增加：
             Laravel\Scout\ScoutServiceProvider::class,
        4.3 运行:
            php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider"
            在config目录下生成 scout.php 配置文件

    5. 增加laravel的scout的jdk
       5.1  下载sdk：
            https://github.com/ErickTamayo/laravel-scout-elastic
       5.2  composer require tamayo/laravel-scout-elastic
       5.3 在config/app.php 配置文件的 providers 数组中增加：
        'providers' => [
            ...
            Laravel\Scout\ScoutServiceProvider::class,
            ...
            ScoutEngines\Elasticsearch\ElasticsearchProvider::class,
        ],
        5.4  修改scout.php文件驱动：
            'driver' => env('SCOUT_DRIVER', 'elasticsearch'),//定义驱动名称

            'elasticsearch' => [
                'index' => env('ELASTICSEARCH_INDEX', 'laravel'),//设置索引名称
                'hosts' => [
                    env('ELASTICSEARCH_HOST', 'http://127.0.0.1:9200'),//设置访问接口
                ],
            ],

20. 创建自定义命令
    1.  php artisan make:command EsInit //生成自定义命令文件
    2. 修改/app/Console/Commands/EsInit.php中
        $signature = 'es:init'; //设置命令格式
    3. /app/Console/Kernel.php中挂载命令
        $commands = [
                \App\Console\Commands\EsInit::class
            ];
    4. php artisan 验证命令是否生成

21.  生成es索引访问地址：
    http://127.0.0.1:9200(服务器地址端口号)/ylaravel2(索引名称)/posts_index(索引类型名称)/4(索引文档唯一标识)
    注意访问es生成的索引文档时一定要匹配到正确的索引名称，索引类型等信息

    head插件的安装：
    http://www.cnblogs.com/xuxy03/p/6039999.html

22. 视图合成器---->为了使视图公共页面的数据在页面载入时统一调用
    1. 在\app\Providers\AppServiceProvider.php的boot方法中引入
        \View::composer('layout.sidebar'===公共模板地址, function ($view) {
                    $topics = \App\Topic::all();//公共数据
                    $view->with('topics', $topics);//将公共数据传入模板
                });
23. 后台推荐页面项目：
    https://github.com/almasaeed2010/AdminLTE
24.  使用auth登录认证时，auth中间件未登录跳转链接可以进行修改：
    D:\phpStudy\WWW\laravel54\app\Exceptions\Handler.php\
    unauthenticated方法中可进行自定义，修改成路由配置文件中定义的路由名字即可。

25. 关于文章的审核多用于“先发后审”

26. 权限管理一点概念：
    权限粒度---->最小权限单元(页面级别，模块级别，按钮级别)，并不是权限粒度越小越好；
    用户----角色----权限



